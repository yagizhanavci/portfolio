{"version":3,"sources":["images/Avatar.png","components/Navbar.js","components/Home.js","components/Resume.js","components/Projects.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","react_router_dom","exact","to","activeClassName","Home","src","avatar","alt","class","Resume","Projects","Contact","App","location","useContext","__RouterContext","transitions","useTransition","pathname","from","opacity","display","transition","enter","leave","components_Navbar","map","_ref","item","props","key","web","div","style","react_router","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1aff8000.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Avatar.765454f0.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className='navbar'>\r\n      <div className='brand-logo'>Yağızhan Avcı</div>\r\n      <ul className='nav-menu'>\r\n        <li>\r\n          <NavLink exact to='/' className='' activeClassName='active'>\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to='/resume' className='' activeClassName='active'>\r\n            Resume\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to='/projects' className='' activeClassName='active'>\r\n            Projects\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to='/contact' className='' activeClassName='active'>\r\n            Contact\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to='#'>Download CV</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport avatar from '../images/Avatar.png';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className='content'>\r\n      <div className='home page'>\r\n        <img className='avatar-img' src={avatar} alt='avatar' />\r\n        <div className='about-me'>\r\n          <h1 className='about-me-title'>\r\n            Yağızhan Avcı <br />{' '}\r\n            <span className='anim-typewriter'>Full Stack Web Developer</span>\r\n          </h1>\r\n          <p className='about-me-content'>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus at\r\n            modi accusantium error voluptatem maxime quas? At alias est\r\n            adipisci.\r\n          </p>\r\n          <ul className='my-skills'>\r\n            <li>\r\n              <i className='fab fa-html5' />\r\n              <br />\r\n              <span className='skill-name'>HTML</span>\r\n            </li>\r\n            <li>\r\n              <i className='fab fa-css3-alt' />\r\n              <br />\r\n              <span className='skill-name'>CSS</span>\r\n            </li>\r\n            <li>\r\n              <i className='fab fa-js-square' />\r\n              <br />\r\n              <span className='skill-name'>JavaScript</span>\r\n            </li>\r\n            <li>\r\n              <i className='fab fa-react' />\r\n              <br />\r\n              <span className='skill-name'>React JS</span>\r\n            </li>\r\n            <li>\r\n              <i class='fab fa-node' />\r\n              <br />\r\n              <span className='skill-name'>Node JS</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Resume = () => {\r\n  return (\r\n    <div className='content'>\r\n      <div className='resume page'>\r\n        <h1>Resume</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Resume;\r\n","import React from 'react';\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <div className='content'>\r\n      <div className='projects page'>\r\n        <h1>Projects</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return(\r\n        <div className=\"content\">\r\n            <div className=\"contact page\">\r\n                <h1>Contact Me</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, { useContext } from 'react';\nimport { Route, Switch, __RouterContext, Redirect } from 'react-router-dom';\nimport { useTransition, animated } from 'react-spring';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport Resume from './components/Resume';\nimport Projects from './components/Projects';\nimport Contact from './components/Contact';\n\nconst App = () => {\n  const { location } = useContext(__RouterContext);\n  const transitions = useTransition(location, location => location.pathname, {\n    from: { opacity: 0, display: 'none', transition: 'all 0.3s linear' },\n    enter: { opacity: 1, display: 'block' },\n    leave: { opacity: 0, display: 'none' },\n  });\n  return (\n    <div className='App'>\n      <Navbar />\n      <div className='bg' />\n      {transitions.map(({ item, props, key }) => {\n        return (\n          <animated.div key={key} style={props}>\n            <Switch location={item}>\n              <Route exact path='/' component={Home} />\n              <Route exact path='/resume' component={Resume} />\n              <Route exact path='/projects' component={Projects} />\n              <Route exact path='/contact' component={Contact} />\n              <Redirect from='*' to='/' />\n            </Switch>\n          </animated.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}